export const CaptchaSolver = {
    DEFAULT_MODEL:
        "", // Your base64 model string here

    // Cache for parsed models to avoid repeated parsing
    _modelCache: new Map(),
    _maxCacheSize: 10,

    // Pre-compiled regex for better performance
    _patterns: {
        moveCommand: /^M\s*(\d+)/,
        numericPattern: /[\d.\s]/g,
    },

    /**
     * Optimized SVG captcha solver with caching and better performance
     *
     * @param {string} svgCaptcha The SVG captcha as XML string
     * @param {string | null} model The predefined model (base64 string), can be null to use default model
     * @param {number} length Amount of characters in the captcha
     * @return {string} Solved captcha value
     */
    solveCaptcha: function (svgCaptcha, model, length = 6) {
        try {
            // Optimize model parsing with caching
            const modelToUse =
                model !== null && model !== undefined
                    ? model
                    : this.DEFAULT_MODEL;
            let parsedModel;

            if (this._modelCache.has(modelToUse)) {
                parsedModel = this._modelCache.get(modelToUse);
            } else {
                const decodedModelString = atob(modelToUse); // Base64 decoding
                parsedModel = JSON.parse(decodedModelString);

                // Manage cache size
                if (this._modelCache.size >= this._maxCacheSize) {
                    const firstKey = this._modelCache.keys().next().value;
                    this._modelCache.delete(firstKey);
                }
                this._modelCache.set(modelToUse, parsedModel);
            }

            // Optimize SVG parsing
            const parser = new DOMParser();
            const doc = parser.parseFromString(svgCaptcha, "image/svg+xml");

            // Check for parsing errors more efficiently
            const parseError = doc.querySelector("parsererror");
            if (parseError) {
                const errorText = parseError.textContent;
                console.error("SVG Parse Error:", errorText);
                throw new Error("Failed to parse SVG: " + errorText);
            }

            // Use querySelectorAll for better performance
            const paths = doc.querySelectorAll("path");
            const noStrokePaths = [];

            // Optimize path filtering
            for (const pathElement of paths) {
                const strokeAttribute = pathElement.getAttribute("stroke");
                if (
                    !strokeAttribute ||
                    strokeAttribute === "" ||
                    strokeAttribute === "none"
                ) {
                    noStrokePaths.push(pathElement);
                }
            }

            // Optimize value extraction with better error handling
            const vals = [];
            for (const pathElement of noStrokePaths) {
                const d = pathElement.getAttribute("d");
                if (!d) {
                    console.warn("Path element missing 'd' attribute");
                    continue;
                }

                // Use pre-compiled regex for better performance
                const match = d.match(this._patterns.moveCommand);
                if (match && match[1]) {
                    vals.push(parseInt(match[1], 10));
                } else {
                    // Optimized fallback logic
                    const dotIndex = d.indexOf(".");
                    const firstPart =
                        dotIndex !== -1 ? d.substring(0, dotIndex) : d;
                    const numericString = firstPart.replace("M", "").trim();
                    const parsed = parseInt(numericString, 10);
                    if (!isNaN(parsed)) {
                        vals.push(parsed);
                    } else {
                        console.warn(
                            `Could not extract numeric value from path: ${d}`
                        );
                        vals.push(0); // Default value
                    }
                }
            }

            // Use more efficient sorting
            const sortedVals = vals.slice().sort((a, b) => a - b);

            // Pre-allocate solution array for better performance
            const solution = new Array(length).fill("");

            // Optimize captcha solving loop
            for (let i = 0; i < noStrokePaths.length; i++) {
                const dAttribute = noStrokePaths[i].getAttribute("d");
                if (!dAttribute) continue;

                // Use pre-compiled regex for pattern extraction
                const pattern = dAttribute.replace(
                    this._patterns.numericPattern,
                    ""
                );

                const originalValue = vals[i];
                const index = sortedVals.indexOf(originalValue);

                if (index === -1) {
                    console.warn(
                        `Value ${originalValue} from path not found in sorted values. Path d: ${dAttribute}`
                    );
                    continue;
                }

                const char = parsedModel[pattern];
                if (char !== undefined) {
                    solution[index] = char;
                } else {
                    console.warn(
                        `Pattern '${pattern}' not found in model for d: ${dAttribute}`
                    );
                    // Keep solution[index] as empty string
                }
            }

            // Return joined solution
            return solution.join("");
        } catch (e) {
            console.error("Failed to solve captcha", e);
            throw new Error("Failed to solve captcha: " + e.message); // Re-throw for consistency
        }
    },

    /**
     * Overloaded method with default length of 6
     */
    solveCaptchaWithModel: function (svgCaptcha, model) {
        return this.solveCaptcha(svgCaptcha, model, 6);
    },

    /**
     * Overloaded method with default model and length (most common use)
     */
    solve: function (svgCaptcha) {
        console.info(
            "Solving captcha (JS):",
            svgCaptcha.substring(0, 100) + "..."
        ); // Log snippet
        return this.solveCaptcha(svgCaptcha, null, 6);
    },
};
